//Siyamthanda Ndlovu u21582735
#include <iostream>

#include "matrix.h"

using namespace std;

//Do not change the displayMatrix() function
void Matrix::displayMatrix() {
    for (int i = 0; i < rows; i++) {
        for (int j = 0; j < columns; j++) {

            cout << *matrix[i][j];

            if (j != columns - 1) {
                cout << " ";
            }
        }

        cout << endl;
    }
}
//ok so earlier the thing wasnt displaying because it displays according to the value of rows and columns themselves (which were zero so it did nothing)

Matrix::Matrix(int in_rows, int in_columns) {

//we already have a  int *** matrix which can hold a dynamic two d array of dynaic integers
if ( (in_rows < 1) || (in_columns < 1) ) {//intialise 3*3 full of ones
rows = 3;
columns = 3;
//cout << "r : " << rows << " c : " << columns << endl;

matrix = new int ** [3];//dynamic array of pointers (each pointing to an array of dynamic int objects)
	for (int r = 0 ; r < 3; r++) {
		matrix[r] = new int* [3]; //3 element array of int pointers that is dynamic
			for (int c = 0; c < 3 ; c++) {
			//*matrix[r][c] = 1;//* as in the value should be equalled to 1
			matrix[r][c] = new int (1);//making location matrix[r][c] point to a new integer object with the value 1
			}
		}
}//if either the rows or columns inputted is less than 1
else if ( (in_rows > 1) && (in_columns > 1) ) {
rows = in_rows;
columns = in_columns;
//cout << "r : " << rows << " c : " << columns << endl;
	matrix = new int ** [rows];//create however many rows there 
		for (int r = 0 ; r < rows; r++) {
			matrix[r] = new int* [columns]; //create cols for every row mistake matrix[rows] = new int * [columns]
			for (int c = 0; c < columns ; c++) {
				matrix[r][c] = new int (0);
			}
		}
	}//if rows or columns are 
}




//ok imma try and completely start over the destructor
Matrix::~Matrix() {
for (int i = 0; i < rows; i++) {
	for (int k = 0; k < columns; k++) {
		delete matrix[i][k];
	}
	delete matrix[i];
	}
	delete matrix;//so this 
}

void Matrix::resizeRows(int num_rows) {
	//so if rows < num_rows then deallocate the whole thing?
	//if you call the constructor you dont change the columns number so yeah
if (rows < num_rows) {
//so like keep the first couple elements in the first copule rows?
for (int r = num_rows; r < rows; r++)//this according to the logic of the shi file
	{
	for (int c = 0; c < columns; c++)
		{
		delete matrix[r][c]; // this was delete * matrix[r][c] dereferencing matrix THREE times
		//delete matrix[r][c];// deallocate the memory at  
		}//columns
		delete [] matrix[r];
		
	}//rows
	delete [] matrix;
}//if rows < num_rows
else if (num_rows > rows) {
for (int r = rows; r < num_rows; r++) {// like if it ended at 6 rows ie index 5 then we need to start at index 6 which is the number of rows
	matrix = new int ** [columns];//dynamic array of pointers (each pointing to an array of dynamic int objects)
		for (int c = 0; c<columns ; c++) {//becuase the number of columns stays the same
			matrix[r][c] = new int (0);//making location matrix[r][c] point to a new integer object with the value 1
		}
	}

}//if rows IS NOT < num_rows
else if (num_rows < 1) {
	cout << "Error: cannot have less than 1 row\n";// bc they say add an endline character << endl;
}//so nothing for if the rows are the same. cool

}

void Matrix::resizeColumns(int num_cols) {
	
}

void Matrix::setMatrix() {

}

