Welcome to Ubuntu 20.04.4 LTS (GNU/Linux 5.15.57.1-microsoft-standard-WSL2 x86_64)

 * Documentation:  https://help.ubuntu.com
 * Management:     https://landscape.canonical.com
 * Support:        https://ubuntu.com/advantage

  System information as of Thu Sep 29 08:11:35 SAST 2022

  System load:  0.9                 Processes:             8
  Usage of /:   0.2% of 1006.85GB   Users logged in:       0
  Memory usage: 14%                 IPv4 address for eth0: 172.18.116.143
  Swap usage:   0%

95 updates can be applied immediately.
52 of these updates are standard security updates.
To see these additional updates run: apt list --upgradable


The list of available updates is more than a week old.
To check for new updates run: sudo apt update


This message is shown once a day. To disable it please create the
/home/siya/.hushlogin file.
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++    -c -o main.o main.cpp
main.cpp: In function ‘int main()’:
main.cpp:136:37: error: expected type-specifier before ‘;’ token
  136 | TesterInterface* ptInterfaceB = new ;
      |                                     ^
make: *** [<builtin>: main.o] Error 1
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++    -c -o main.o main.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests) || maxNumTesters = 7

NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other) ||
Members of objTesterInterB :
Max number of testers: 0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests) || maxNumTesters = 3
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
0
Main Function Is about to go out of scope



TesterInterface::~TesterInterface()

TesterInterface::~TesterInterface()
IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 0
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 2
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 1
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++    -c -o main.o main.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests) || maxNumTesters = 7

NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other) ||
Members of objTesterInterB :
Max number of testers: 0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests) || maxNumTesters = 4
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
1

free(): double free detected in tcache 2
Aborted
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++    -c -o main.o main.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
^[[Asiya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests) || maxNumTesters = 7

NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other) ||
Members of objTesterInterB :
Max number of testers: 0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests) || maxNumTesters = 4
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
1

Main Function Is about to go out of scope



TesterInterface::~TesterInterface()

TesterInterface::~TesterInterface()
IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 1
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 2
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++    -c -o main.o main.cpp
main.cpp: In function ‘int main()’:
main.cpp:146:31: error: cannot bind non-const lvalue reference of type ‘TesterInterface&’ to an rvalue of type ‘TesterInterface’
  146 | DisplayTesterInterfaceDetails(ptInterfaceB);
      |                               ^~~~~~~~~~~~
In file included from main.cpp:12:
TesterInterface.h:18:1: note:   after user-defined conversion: ‘TesterInterface::TesterInterface(TesterInterface*)’
   18 | TesterInterface(TesterInterface* other);
      | ^~~~~~~~~~~~~~~
main.cpp:15:53: note:   initializing argument 1 of ‘void DisplayTesterInterfaceDetails(TesterInterface&)’
   15 | void DisplayTesterInterfaceDetails(TesterInterface& objInterface);
      |                                    ~~~~~~~~~~~~~~~~~^~~~~~~~~~~~
make: *** [<builtin>: main.o] Error 1
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++    -c -o main.o main.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests) || maxNumTesters = 7

NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other) ||
Members of objTesterInterB :
Max number of testers: 0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests) || maxNumTesters = 4
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
1

Max number of testers: 0
Current Number of Testers : 0
Main Function Is about to go out of scope



TesterInterface::~TesterInterface()

TesterInterface::~TesterInterface()
IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 1
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 2
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++    -c -o main.o main.cpp
^[[A^[[Ag++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests) || maxNumTesters = 7

NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other) ||
Members of objTesterInterB :
Max number of testers: 0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests) || maxNumTesters = 4
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
1

objTesterInterB Summary after adding two testersMax number of testers: 0
Current Number of Testers : 0
Main Function Is about to go out of scope



TesterInterface::~TesterInterface()

TesterInterface::~TesterInterface()
IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 1
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 2
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
TesterInterface.cpp: In member function ‘int TesterInterface::addTester(NumberTester*)’:
TesterInterface.cpp:104:1: error: ‘cout’ was not declared in this scope; did you mean ‘std::cout’?
  104 | cout << "This is the currNumTesters value : " << currNumTesters <<"\n";
      | ^~~~
      | std::cout
In file included from TesterInterface.cpp:2:
/usr/include/c++/9/iostream:61:18: note: ‘std::cout’ declared here
   61 |   extern ostream cout;  /// Linked to standard output
      |                  ^~~~
make: *** [makefile:32: TesterInterface.o] Error 1
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++    -c -o main.o main.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
^[[A^[[A^[[Asiya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests) || maxNumTesters = 7

NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other) ||
Members of objTesterInterB :
Max number of testers: 0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests) || maxNumTesters = 4
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: 0
Current Number of Testers : 0
Main Function Is about to go out of scope



TesterInterface::~TesterInterface()

TesterInterface::~TesterInterface()
IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 1
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 2
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: 0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: 0
Current Number of Testers : 0
Main Function Is about to go out of scope



TesterInterface::~TesterInterface()

TesterInterface::~TesterInterface()
IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 1
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 2
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
^[[A^[[Asiya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers:
int TesterInterface::getMaxNumTesters() const
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const
0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers:
int TesterInterface::getMaxNumTesters() const
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const
0
Main Function Is about to go out of scope



TesterInterface::~TesterInterface()

TesterInterface::~TesterInterface()
IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 1
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 2
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
./g++ -c -std=c++98 TesterInterface.cpp
maing++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers : 0
Main Function Is about to go out of scope



TesterInterface::~TesterInterface()

TesterInterface::~TesterInterface()
IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 1
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 2
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
/usr/bin/ld: main.o: in function `DisplayTesterInterfaceDetails(TesterInterface&)':
main.cpp:(.text+0x793): undefined reference to `TesterInterface::getMaxNumTesters() const'
collect2: error: ld returned 1 exit status
make: *** [makefile:5: main] Error 1
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++    -c -o main.o main.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers : 0
getMax function says : getMaxNumTesters()
0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers : 0
getMax function says : getMaxNumTesters()
0
Main Function Is about to go out of scope



TesterInterface::~TesterInterface()

TesterInterface::~TesterInterface()
IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 1
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 2
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++    -c -o main.o main.cpp
^[[A^[[Ag++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
getMaxNumTesters() : maxNumTesters is : 4
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
getMaxNumTesters() : maxNumTesters is : 4
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers : 0
Main Function Is about to go out of scope



TesterInterface::~TesterInterface()

TesterInterface::~TesterInterface()
IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 1
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 2
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
^[[Asiya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers : 0
Main Function Is about to go out of scope



TesterInterface::~TesterInterface()

TesterInterface::~TesterInterface()
IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 1
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 2
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const || currNumTesters = 0
0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 1
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 2
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const || currNumTesters = 0
0
Main Function Is about to go out of scope



TesterInterface::~TesterInterface()

TesterInterface::~TesterInterface()
IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 1
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 2
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++    -c -o main.o main.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const || currNumTesters = 0
0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 1
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 2
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const || currNumTesters = 0
0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 8
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 5
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 2
NumberTester* IsSmaller::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 3
This is the currNumTesters value : 3
2

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 3
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 6
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 3
NumberTester* IsDivisible::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 4
This is the currNumTesters value : 4
3

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
Testers::AddTester function || the index == MaxNumTesters and testers array is full OR tester points to null so we return -1-1

Main Function Is about to go out of scope



TesterInterface::~TesterInterface()

TesterInterface::~TesterInterface()
IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 7
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 5
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cppnumAliveObjects = 0
g++    -c -o main.o main.cppDependantTester() || ValueDependantTester::numAliveObjects = 4
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o mainAliveObjects = 2
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ester::numAliveObjects = 3
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ 4
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const || currNumTesters = 0
0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 1
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 2
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const || currNumTesters = 0
0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 8
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 5
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 2
NumberTester* IsSmaller::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 3
This is the currNumTesters value : 3
2

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 3
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 6
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 3
NumberTester* IsDivisible::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 4
This is the currNumTesters value : 4
3

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
Testers::AddTester function || the index == MaxNumTesters and testers array is full OR tester points to null so we return -1-1

Main Function Is about to go out of scope



TesterInterface::~TesterInterface()


TesterInterface::~TesterInterface()

IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 7
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 5
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 4
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 2
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++    -c -o main.o main.cpp
main.cpp: In function ‘int main()’:
main.cpp:163:18: error: ‘removeTester’ was not declared in this scope
  163 | bool isRemoved = removeTester(2);
      |                  ^~~~~~~~~~~~
make: *** [<builtin>: main.o] Error 1
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++    -c -o main.o main.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const || currNumTesters = 0
0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 1
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 2
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const || currNumTesters = 0
0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 8
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 5
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 2
NumberTester* IsSmaller::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 3
This is the currNumTesters value : 3
2

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 3
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 6
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 3
NumberTester* IsDivisible::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 4
This is the currNumTesters value : 4
3

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
Testers::AddTester function || the index == MaxNumTesters and testers array is full OR tester points to null so we return -1-1

bool TesterInterface::removeTester || currNumTesters = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
bool TesterInterface::removeTester || valid action to be taken so VALUE == TRUE
TRUE : we were able to remove the object at 2
Main Function Is about to go out of scope



TesterInterface::~TesterInterface()


TesterInterface::~TesterInterface()

IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 7
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 5
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 4
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 2
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const || currNumTesters = 0
0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 1
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 2
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const || currNumTesters = 0
0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 8
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 5
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 2
NumberTester* IsSmaller::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 3
This is the currNumTesters value : 3
2

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 3
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 6
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 3
NumberTester* IsDivisible::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 4
This is the currNumTesters value : 4
3

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
Testers::AddTester function || the index == MaxNumTesters and testers array is full OR tester points to null so we return -1-1

bool TesterInterface::removeTester || currNumTesters = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
bool TesterInterface::removeTester || valid action to be taken so VALUE == TRUE
TRUE : we were able to remove the object at 2
Main Function Is about to go out of scope



TesterInterface::~TesterInterface()


TesterInterface::~TesterInterface()

IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 7
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 5
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 4
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 2
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++    -c -o main.o main.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
1is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
7is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const || currNumTesters = 0
0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 1
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 2
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const || currNumTesters = 0
0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 8
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 5
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 2
NumberTester* IsSmaller::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 3
This is the currNumTesters value : 3
2

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 3
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 6
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 3
NumberTester* IsDivisible::clone()

int TesterInterface::getCurrNumTesters() const || currNumTesters = 4
This is the currNumTesters value : 4
3

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
Testers::AddTester function || the index == MaxNumTesters and testers array is full OR tester points to null so we return -1-1

bool TesterInterface::removeTester || currNumTesters = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
bool TesterInterface::removeTester || valid action to be taken so VALUE == TRUE
TRUE : we were able to remove the object at 2
objTesterInterB Summary after removing a tester from index 2
Max number of testers: getMaxNumTesters() : maxNumTesters is : 0
0
Current Number of Testers :
int TesterInterface::getCurrNumTesters() const || currNumTesters = 0
0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
Testers::AddTester function || the index == MaxNumTesters and testers array is full OR tester points to null so we return -1-1

Main Function Is about to go out of scope



TesterInterface::~TesterInterface()


TesterInterface::~TesterInterface()

IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 7
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 5
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 4
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 2
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++    -c -o main.o main.cpp
^[[Ag++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
make: 'main' is up to date.
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
0 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
1 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6 is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: 0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: 0
Current Number of Testers : 0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 8
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 5
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 2
NumberTester* IsSmaller::clone()
This is the currNumTesters value : 3
2

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 3
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 6
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 3
NumberTester* IsDivisible::clone()
This is the currNumTesters value : 4
3

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
Testers::AddTester function || the index == MaxNumTesters and testers array is full OR tester points to null so we return -1-1

bool TesterInterface::removeTester || currNumTesters = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
bool TesterInterface::removeTester || valid action to be taken so VALUE == TRUE
TRUE : we were able to remove the object at 2
objTesterInterB Summary after removing a tester from index 2
Max number of testers: 0
Current Number of Testers : 0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
Testers::AddTester function || the index == MaxNumTesters and testers array is full OR tester points to null so we return -1-1

Main Function Is about to go out of scope



TesterInterface::~TesterInterface()


TesterInterface::~TesterInterface()

IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 7
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 5
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 4
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 2
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++    -c -o main.o main.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
0 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
1 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6 is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: 0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: 0
Current Number of Testers : 0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 8
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 5
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 2
NumberTester* IsSmaller::clone()
This is the currNumTesters value : 3
2

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 3
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 6
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 3
NumberTester* IsDivisible::clone()
This is the currNumTesters value : 4
3

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
Testers::AddTester function || the index == MaxNumTesters and testers array is full OR tester points to null so we return -1
the index == 4
-1

bool TesterInterface::removeTester || currNumTesters = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
bool TesterInterface::removeTester || valid action to be taken so VALUE == TRUE
TRUE : we were able to remove the object at 2

objTesterInterB Summary after removing a tester from index 2
Max number of testers: 0
Current Number of Testers : 0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
Testers::AddTester function || the index == MaxNumTesters and testers array is full OR tester points to null so we return -1
the index == 4
-1

Main Function Is about to go out of scope



TesterInterface::~TesterInterface()


TesterInterface::~TesterInterface()

IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 7
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 5
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 4
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 2
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 3
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
0 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
1 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6 is indeed NULL

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: 0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: 0
Current Number of Testers : 0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 8
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 5
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 2
NumberTester* IsSmaller::clone()
This is the currNumTesters value : 3
2

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
TesterInterface::addTester Loop || index == 3
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 3
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 6
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 3
NumberTester* IsDivisible::clone()
This is the currNumTesters value : 4
3

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
TesterInterface::addTester Loop || index == 3
TesterInterface::addTester Loop || index == 4
Testers::AddTester function || the index == MaxNumTesters and testers array is full OR tester points to null so we return -1
the index == 4
-1

bool TesterInterface::removeTester || currNumTesters = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
bool TesterInterface::removeTester || valid action to be taken so VALUE == TRUE
TRUE : we were able to remove the object at 2

objTesterInterB Summary after removing a tester from index 2
Max number of testers: 0
Current Number of Testers : 0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 5
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 3
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 4
2

Main Function Is about to go out of scope



TesterInterface::~TesterInterface()


TesterInterface::~TesterInterface()

IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 2
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 1
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 7
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 5
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 6
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 4
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 5
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 2
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 4
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++    -c -o main.o main.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================



Testing : TesterInterface(int maxNumTests)

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
0 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
1 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6 is indeed NULL


Testing : TesterInterface(TesterInterface& other) , remove Tester , add Tester , operator[]


TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: 0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: 0
Current Number of Testers : 0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 8
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 5
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 2
NumberTester* IsSmaller::clone()
This is the currNumTesters value : 3
2

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
TesterInterface::addTester Loop || index == 3
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 3
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 6
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 3
NumberTester* IsDivisible::clone()
This is the currNumTesters value : 4
3

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
TesterInterface::addTester Loop || index == 3
TesterInterface::addTester Loop || index == 4
Testers::AddTester function || the index == MaxNumTesters and testers array is full OR tester points to null so we return -1
the index == 4
-1

bool TesterInterface::removeTester || currNumTesters = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
bool TesterInterface::removeTester || valid action to be taken so VALUE == TRUE
TRUE : we were able to remove the object at 2

objTesterInterB Summary after removing a tester from index 2
Max number of testers: 0
Current Number of Testers : 0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 5
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 3
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 4
2



Testing : TesterInterface(TesterInterface* other) , evaluate , failedTests , numberOfFailedTests

NumberTester::NumberTester() || NumberTester::numAliveObjects = 10
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 6
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 4
NumberTester* IsPrimeNumber::clone()
NumberTester::NumberTester() || NumberTester::numAliveObjects = 11
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 7
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 3
NumberTester* IsEvenOdd::clone()
NumberTester::NumberTester() || NumberTester::numAliveObjects = 12
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 8
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 5
NumberTester* IsPrimeNumber::clone()
NumberTester::NumberTester() || NumberTester::numAliveObjects = 13
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 7
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 4
NumberTester* IsDivisible::clone()

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 4 || currNumTesters : 4

Main Function Is about to go out of scope



TesterInterface::~TesterInterface()


TesterInterface::~TesterInterface()

IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 4
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 7
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 12
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 2
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 6
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 11
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 6
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 10
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 5
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 9
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 3
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 4
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++ -c -std=c++98 TesterInterface.cpp
g++    -c -o main.o main.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================



Testing : TesterInterface(int maxNumTests)

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
0 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
1 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6 is indeed NULL


Testing : TesterInterface(TesterInterface& other) , remove Tester , add Tester , operator[]


TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: 0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: 0
Current Number of Testers : 0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 8
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 5
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 2
NumberTester* IsSmaller::clone()
This is the currNumTesters value : 3
2

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
TesterInterface::addTester Loop || index == 3
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 3
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 6
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 3
NumberTester* IsDivisible::clone()
This is the currNumTesters value : 4
3

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
TesterInterface::addTester Loop || index == 3
TesterInterface::addTester Loop || index == 4
Testers::AddTester function || the index == MaxNumTesters and testers array is full OR tester points to null so we return -1
the index == 4
-1

bool TesterInterface::removeTester || currNumTesters = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
bool TesterInterface::removeTester || valid action to be taken so VALUE == TRUE
TRUE : we were able to remove the object at 2

objTesterInterB Summary after removing a tester from index 2
Max number of testers: 0
Current Number of Testers : 0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 5
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 3
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 4
2



Testing : TesterInterface(TesterInterface* other) , evaluate , failedTests , numberOfFailedTests

NumberTester::NumberTester() || NumberTester::numAliveObjects = 10
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 6
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 4
NumberTester* IsPrimeNumber::clone()
NumberTester::NumberTester() || NumberTester::numAliveObjects = 11
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 7
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 3
NumberTester* IsEvenOdd::clone()
NumberTester::NumberTester() || NumberTester::numAliveObjects = 12
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 8
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 5
NumberTester* IsPrimeNumber::clone()
NumberTester::NumberTester() || NumberTester::numAliveObjects = 13
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 7
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 4
NumberTester* IsDivisible::clone()

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 4 || currNumTesters : 4


bool TesterInterface::evaluate(int num)
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsDivisible::evaluate(int val)
val % value != 0 and VALUE == FALSE
TesterInterface::evaluate || iNumTrues != currNumTesters OR array testers == NULLso VALUE == FALSE
evaluateValue == FALSE meaning some of the tests returned a false value and there were some fails

TesterInterface::numberOfFailedTests(int num)

bool TesterInterface::evaluate(int num)
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsDivisible::evaluate(int val)
val % value != 0 and VALUE == FALSE
TesterInterface::evaluate || iNumTrues != currNumTesters OR array testers == NULLso VALUE == FALSE
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsDivisible::evaluate(int val)
val % value != 0 and VALUE == FALSE
The number of failed Tests in InterfaceC is = 3

int* TesterInterface::failedTests(int num)

bool TesterInterface::evaluate(int num)
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsDivisible::evaluate(int val)
val % value != 0 and VALUE == FALSE
TesterInterface::evaluate || iNumTrues != currNumTesters OR array testers == NULLso VALUE == FALSE
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsDivisible::evaluate(int val)
val % value != 0 and VALUE == FALSE
ptArrayTestFails[0] = 0ptArrayTestFails[1] = 2ptArrayTestFails[2] = 3Main Function Is about to go out of scope



TesterInterface::~TesterInterface()


TesterInterface::~TesterInterface()

IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 4
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 7
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 12
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 2
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 6
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 11
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 6
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 10
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 5
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 9
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 3
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 4
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ make
g++    -c -o main.o main.cpp
g++ -g -std=c++98 NumberTester.o ValueDependantTester.o ValueIndependantTester.o IsDivisible.o IsGreater.o IsSmaller.o IsEvenOdd.o IsPrimeNumber.o TesterInterface.o main.o -o main
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$ ./main


Begin Testing IsDivisble

NumberTester::NumberTester() || NumberTester::numAliveObjects = 1
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 1
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 2
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 2
NumberTester* IsDivisible::clone()

IsDivisible Evaluate Function
bool IsDivisible::evaluate(int val)
val % value == 0 and VALUE == TRUE
ptNumTester1->evaluate(28) == true
Alive Objects - ptNumTester1 : 2
Alive Objects - ptDivisible1 : 2

About to delete ptNumTester2
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 1
Alive Objects - ptDivisible1 (Again) : 2


Begin Testing IsGreater

NumberTester::NumberTester() || NumberTester::numAliveObjects = 2
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 3
IsGreater::IsGreater(int value) || IsGreater::numAliveObjects = 1
bool IsGreater::evaluate(int val)
val > value and VALUE == TRUE
ptNumTesterA->evaluate(45882) == true :)


Begin Testing IsSmaller

NumberTester::NumberTester() || NumberTester::numAliveObjects = 3
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 4
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 1
bool IsSmaller::evaluate(int val)
val < value and VALUE == TRUE
evaluate for ptSmallerObject returned true and 11 is smaller than 16


Begin Testing IsEvenOdd

NumberTester::NumberTester() || NumberTester::numAliveObjects = 4
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 1
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 1
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
The IsEvenOdd evaluate function said 18 is an even number


Begin Testing IsPrimeNumber

NumberTester::NumberTester() || NumberTester::numAliveObjects = 5
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 2
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 1
1 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
2 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
3 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
4 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
5 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
6 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
7 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
8 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21
9 : bool IsPrimeNumber::evaluate(int val)
 FALSE
0
10 : bool IsPrimeNumber::evaluate(int val)
 TRUE inumFactors ==21


=========================================================

Begin Testing Tester Interface

=========================================================



Testing : TesterInterface(int maxNumTests)

0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null
4 NumTester* set to null
5 NumTester* set to null
6 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 7 || currNumTesters : 0


NumberTester* TesterInterface::operator[] (int pos)
0 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
1 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
2 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
3 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
4 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
5 is indeed NULL

NumberTester* TesterInterface::operator[] (int pos)
6 is indeed NULL


Testing : TesterInterface(TesterInterface& other) , remove Tester , add Tester , operator[]


TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 0 || currNumTesters : 0

Members of objTesterInterB :
Max number of testers: 0
Current Number of Testers : 0
0 NumTester* set to null
1 NumTester* set to null
2 NumTester* set to null
3 NumTester* set to null

TesterInterface::TesterInterface(int maxNumTests)
maxNumTesters : 4 || currNumTesters : 0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 0
NumberTester::NumberTester() || NumberTester::numAliveObjects = 6
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 3
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 2
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 1
0

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 1
NumberTester::NumberTester() || NumberTester::numAliveObjects = 7
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 4
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 2
NumberTester* IsEvenOdd::clone()
This is the currNumTesters value : 2
1

objTesterInterB Summary after adding two testers
Max number of testers: 0
Current Number of Testers : 0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 8
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 5
IsSmaller::IsSmaller(int value) || IsSmaller::numAliveObjects = 2
NumberTester* IsSmaller::clone()
This is the currNumTesters value : 3
2

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
TesterInterface::addTester Loop || index == 3
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 3
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 6
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 3
NumberTester* IsDivisible::clone()
This is the currNumTesters value : 4
3

Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
TesterInterface::addTester Loop || index == 3
TesterInterface::addTester Loop || index == 4
Testers::AddTester function || the index == MaxNumTesters and testers array is full OR tester points to null so we return -1
the index == 4
-1

bool TesterInterface::removeTester || currNumTesters = 3
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
bool TesterInterface::removeTester || valid action to be taken so VALUE == TRUE
TRUE : we were able to remove the object at 2

objTesterInterB Summary after removing a tester from index 2
Max number of testers: 0
Current Number of Testers : 0
Index of added tester :
int TesterInterface::addTester(NumberTester* tester)
TesterInterface::addTester Loop || index == 1
TesterInterface::addTester Loop || index == 2
testers[index] == NULL so we add the passed in NumberTester to our testers array at index : 2
NumberTester::NumberTester() || NumberTester::numAliveObjects = 9
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 5
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 3
NumberTester* IsPrimeNumber::clone()
This is the currNumTesters value : 4
2



Testing : TesterInterface(TesterInterface* other) , evaluate , failedTests , numberOfFailedTests

NumberTester::NumberTester() || NumberTester::numAliveObjects = 10
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 6
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 4
NumberTester* IsPrimeNumber::clone()
NumberTester::NumberTester() || NumberTester::numAliveObjects = 11
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 7
IsEvenOdd::IsEvenOdd() || IsEvenOdd::numAliveObjects = 3
NumberTester* IsEvenOdd::clone()
NumberTester::NumberTester() || NumberTester::numAliveObjects = 12
ValueIndependantTester::ValueIndependantTester() || ValueDependantTester::numAliveObjects = 8
IsPrimeNumber::IsPrimeNumber() || IsPrimeNumber::numAliveObjects = 5
NumberTester* IsPrimeNumber::clone()
NumberTester::NumberTester() || NumberTester::numAliveObjects = 13
ValueDependantTester::ValueDependantTester(int val) || ValueDependantTester::numAliveObjects = 7
IsDivisible::IsDivisible(int value) || IsDivisible::numAliveObjects = 4
NumberTester* IsDivisible::clone()

TesterInterface::TesterInterface(TesterInterface* other)
maxNumTesters : 4 || currNumTesters : 4


bool TesterInterface::evaluate(int num)
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsDivisible::evaluate(int val)
val % value != 0 and VALUE == FALSE
TesterInterface::evaluate || iNumTrues != currNumTesters OR array testers == NULLso VALUE == FALSE
evaluateValue == FALSE meaning some of the tests returned a false value and there were some fails

TesterInterface::numberOfFailedTests(int num)

bool TesterInterface::evaluate(int num)
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsDivisible::evaluate(int val)
val % value != 0 and VALUE == FALSE
TesterInterface::evaluate || iNumTrues != currNumTesters OR array testers == NULLso VALUE == FALSE
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsDivisible::evaluate(int val)
val % value != 0 and VALUE == FALSE
The number of failed Tests in InterfaceC is = 3

int* TesterInterface::failedTests(int num)

bool TesterInterface::evaluate(int num)
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsDivisible::evaluate(int val)
val % value != 0 and VALUE == FALSE
TesterInterface::evaluate || iNumTrues != currNumTesters OR array testers == NULLso VALUE == FALSE
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsEvenOdd::evaluate(int val)
val is even and VALUE == TRUE
bool IsPrimeNumber::evaluate(int val)
 FALSE
bool IsDivisible::evaluate(int val)
val % value != 0 and VALUE == FALSE
ptArrayTestFails[0] = 0
ptArrayTestFails[1] = 2
ptArrayTestFails[2] = 3
Main Function Is about to go out of scope



TesterInterface::~TesterInterface()


TesterInterface::~TesterInterface()

IsPrimeNumber::~IsPrimeNumber() || IsPrimeNumber numAliveObjects = 4
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 7
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 12
IsEvenOdd::~IsEvenOdd() || IsEvenOdd numAliveObjects = 2
ValueIndependantTester::~ValueIndependantTester() || ValueDependantTester::numAliveObjects = 6
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 11
IsSmaller::~IsSmaller() || IsSmaller numAliveObjects = 1
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 6
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 10
IsGreater::~IsGreater() || IsGreater numAliveObjects = 0
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 5
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 9
IsDivisible::~IsDivisible() || IsDivisible numAliveObjects = 3
ValueDependantTester::~ValueDependantTester() || ValueDependantTester::numAliveObjects = 4
NumberTester::~NumberTester()|| NumberTester::numAliveObjects = 8
siya@LAPTOP-LAAA4T1H:/mnt/c/Users/siyam/OneDrive/Desktop/prac5$